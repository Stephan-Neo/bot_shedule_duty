import pandas as pd
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    CallbackContext
)
import datetime
import os
from tabulate import tabulate

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = "8310592279:AAGq7SUA2_v6XmP-JKN5RbbKF0eBnFnyc84"
EXCEL_FILE = "exc.xlsx"
CHANNEL_ID = "-1002257875520"

def load_schedule():
    if not os.path.exists(EXCEL_FILE):
        return pd.DataFrame(columns=['–î–∞—Ç–∞', '–î–µ–∂—É—Ä–Ω—ã–π'])
    df = pd.read_excel(EXCEL_FILE)
    df['–î–∞—Ç–∞'] = pd.to_datetime(df['–î–∞—Ç–∞']).dt.date
    return df.sort_values('–î–∞—Ç–∞')

def get_duty(date):
    df = load_schedule()
    duty = df[df['–î–∞—Ç–∞'] == date]
    return duty.iloc[0]['–î–µ–∂—É—Ä–Ω—ã–π'] if not duty.empty else None

def get_main_keyboard():
    keyboard = [
        [InlineKeyboardButton("üë§ –°–µ–≥–æ–¥–Ω—è", callback_data='duty_today'),
         InlineKeyboardButton("‚è© –ó–∞–≤—Ç—Ä–∞", callback_data='duty_tomorrow')],
        [InlineKeyboardButton("üìã –ü–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data='full_schedule')],
    ]
    return InlineKeyboardMarkup(keyboard)

def format_single_duty(date, duty):
    weekdays = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    weekday = weekdays[date.weekday()]
    return (
        f"üìÖ *–î–∞—Ç–∞:* {date.strftime('%d.%m.%Y')} ({weekday})\n"
        f"üë§ *–î–µ–∂—É—Ä–Ω—ã–π:* _{duty}_"
    )

def format_all_duties(df):
    headers = ["üìÖ –î–∞—Ç–∞", "üë§ –î–µ–∂—É—Ä–Ω—ã–π"]
    table_data = [[row['–î–∞—Ç–∞'].strftime('%d.%m.%Y'), row['–î–µ–∂—É—Ä–Ω—ã–π']] for _, row in df.iterrows()]
    return (
        "üìã *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–µ–∂—É—Ä–Ω—ã—Ö:*\n"
        "```\n"
        f"{tabulate(table_data, headers=headers, tablefmt='grid')}\n"
        "```"
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    today = datetime.date.today()
    df = load_schedule()
    
    try:
        if query.data == 'duty_today':
            duty = get_duty(today)
            new_text = format_single_duty(today, duty) if duty else "üì≠ –ù–∞ —Å–µ–≥–æ–¥–Ω—è –¥–µ–∂—É—Ä–Ω—ã–π –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
        elif query.data == 'duty_tomorrow':
            tomorrow = today + datetime.timedelta(days=1)
            duty = get_duty(tomorrow)
            new_text = format_single_duty(tomorrow, duty) if duty else "üì≠ –ù–∞ –∑–∞–≤—Ç—Ä–∞ –¥–µ–∂—É—Ä–Ω—ã–π –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
        elif query.data == 'full_schedule':
            new_text = format_all_duties(df) if not df.empty else "üì≠ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if new_text != query.message.text:
            await query.edit_message_text(
                text=new_text,
                parse_mode='Markdown',
                reply_markup=get_main_keyboard()
            )
        else:
            await query.answer("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–∞")
            
    except Exception as e:
        print(f"Error: {e}")
        await query.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

async def send_channel_message(context: CallbackContext):
    today = datetime.date.today()
    duty = get_duty(today)
    
    text = (
        "üì¢ *–î–µ–∂—É—Ä—Å—Ç–≤–æ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è*\n\n"
        f"{format_single_duty(today, duty) if duty else 'üì≠ –ù–∞ —Å–µ–≥–æ–¥–Ω—è –¥–µ–∂—É—Ä–Ω—ã–π –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}"
    )
    
    try:
        await context.bot.send_message(
            chat_id=CHANNEL_ID,
            text=text,
            parse_mode='Markdown',
            reply_markup=get_main_keyboard()
        )
    except Exception as e:
        print(f"Channel message error: {e}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        await update.message.reply_text(
            "üëã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–µ–∂—É—Ä—Å—Ç–≤–∞–º–∏:",
            reply_markup=get_main_keyboard(),
            parse_mode='Markdown'
        )
    except Exception as e:
        print(f"Start error: {e}")

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    print(f"Error: {context.error}")
    if isinstance(update, Update) and update.callback_query:
        await update.callback_query.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")

def main():
    application = Application.builder().token(TOKEN).build()
    
    application.add_error_handler(error_handler)
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))
    
    # –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    job_queue = application.job_queue
    job_queue.run_daily(
        send_channel_message,
        time=datetime.time(hour=15, minute=0),
        days=tuple(range(7))
    )
    application.run_polling()

if __name__ == '__main__':
    main()